// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres.vsxzaigydmpjwawqphzf:fQzduAX6v8NRg7vKj@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"
}

model User {
  id                 String     @id @default(uuid())
  name               String
  email              String     @unique
  password           String
  role               Role       @default(USER)
  profilePhoto       String?
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  isDeleted          Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("users")
}

model Experience {
  id         String   @id @default(uuid())
  company    String
  position   String
  duration   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("experiences")
}

model Skill {
  id        String   @id @default(uuid())
  icon      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model Blog {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  headline  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Project {
  id          String        @id @default(uuid())
  num         Int
  category    String
  title       String
  description String
  image       String
  live        String?
  github      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  stack       ProjectStack[]

  @@map("projects")
}

model ProjectStack {
  id        String   @id @default(uuid())
  projectId String
  name      String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_stacks")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  BLOCKED
  ACTIVE
}
